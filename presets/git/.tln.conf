'use strict';

const path = require('path');
const fs = require('fs');

class Subtree {
  constructor() {
  }

  clone(context) {
    console.log('!!!git-clone!!!');
    return ['echo git'];
  }

  fork(context) {
    return [];
  }

  getSubtreesFileName(home) {
    return path.join(home, '.gitsubtrees');
  }

  loadSubtrees(home) {
    const fn = this.getSubtreesFileName(home);
    let r = {};
    if (fs.existsSync(fn)) {
      r = JSON.parse(fs.readFileSync(fn, 'utf8'));
    }
    return r;
  }

  saveSubtrees(home, subtrees) {
    fs.writeFile(this.getSubtreesFileName(home, JSON.stringify(subtrees)));
  }

  addSubtree(context) {
    let subtrees = this.loadSubtrees(context.env.COMPONENT_HOME);
    let subtree = subtrees.filter(elem  => elem.id === context.env.TLN_GIT_PREFIX);
    if (subtree) {
      // WARN
      subtree.origin = context.env.TLN_GIT_ORIGIN;
      subtree.branch = context.env.TLN_GIT_BRANCH;
    } else {
      subtree = {
        prefix: context.env.TLN_GIT_PREFIX,
        origin: context.env.TLN_GIT_ORIGIN,
        branch: context.env.TLN_GIT_BRANCH
      };
    }
    this.saveSubtrees(context.env.COMPONENT_HOME, subtrees);
    return ["git subtree add --prefix ${subtree.prefix} ${subtree.origin} ${subtree.branch} --squash"];
  }

  pullSubtree(context) {
    return [];
  }

  pullAllSubtrees(context) {
    return [];
  }

}


module.exports = {
  tags: (context) => [],
  options: (context) => [
    { id: 'origin',   desc: 'Origin url',               variable: 'TLN_GIT_ORIGIN',   default: null },
    { id: 'upstream', desc: 'Upstream remote url',      variable: 'TLN_GIT_UPSTREAM', default: null },
    { id: 'branch',   desc: 'Working branch',           variable: 'TLN_GIT_BRANCH',   default: 'master' },
    { id: 'user',     desc: 'User name',                variable: 'TLN_GIT_USER',     default: null },
    { id: 'email',    desc: 'User email',               variable: 'TLN_GIT_EMAIL',    default: null },
    { id: 'prefix',   desc: 'Submodule/subtree prefix', variable: 'TLN_GIT_PREFIX',   default: null }
  ],
  inherits: (context) => [],
  depends: (context) => [],
  variables: (context) => [],
  steps: (context) => [
    {
      id: 'git-clone',
      desc: '\
Clone git repository and configure user, \
example: tln git-clone --origin=git@github.com:org/proj.git --user=user --email=user@org.com',
      script: (context) => (new Subtree).clone(context)
    },
    {
      id: 'git-fork',
      desc: '\
Clone git repository, add additional remote (upstream) and configure user, \
example: tln git-fork --origin=git@github.com:user/proj.git --upstream=git@github.com:org/proj.git --user=user --email=user@org.com',
      script: (context) => (new Subtree).fork(context)
    },
    {
      id: 'git-subtree-add',
      desc: '',
      script: (context) => (new Subtree).addSubtree(context)
    },
    {
      id: 'git-subtree-pull',
      desc: '',
      script: (context) => (new Subtree).pullSubtree(context)
    },
    {
      id: 'git-subtree-pull-all',
      desc: '',
      script: (context) => (new Subtree).pullAllSubtrees(context)
    }
  ],
  components: (context) => []
}