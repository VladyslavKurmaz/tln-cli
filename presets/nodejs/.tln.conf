module.exports = {
  tags: (tln) => [],
  options: (tln, options) => {},
  dotenvs: (tln) => [],
  depends: (tln) => [],
  inherits: (tln) => [],
  variables: (tln, variables) => {
    variables
      .set('NODEJS_HOME', (tln, data) => data.env['COMPONENT_ORIGIN'])
      .prepend('PATH', (tln, data) => { 
        const suffix = (tln.getOsInfo().platform === 'win32')?'':`${data.sep}bin`;
        return `${data.env['COMPONENT_ORIGIN']}${suffix}`;
      });
  },
  steps: (tln) => [
    {
      id: 'init',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
        'npm i'
      ])
    },
    {
      id: 'build',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
      ])
    },
    {
      id: 'build-prod',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
      ])
    },
    {
      id: 'test',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
        'npm run jasmine && npm run coverage'
      ])
    },
    {
      id: 'serve',
      filter: '',
      desc: '',
      script: (tln, script) => script.set([
        'npm run serve'
      ])
    },
    {
      id: 'build-docker',
      filter: 'linux',
      desc: '',
      script: (tln, script) => script.set([
        '#rm -rf ./target || true',
        '#mkdir target',
        '#mkdir target/conf.d',
        '#if [ -d ./ssl ]',
        '#then',
        '#  envsubst ${COMPONENT_ID} ${COMPONENT_PARAM_HOST} > ./target/conf.d/default.conf < ./default.conf.https.template',
        '#  cp -r ./ssl ./target/',
        '#else',
        '#  envsubst ${COMPONENT_PARAM_HOST} > ./target/conf.d/default.conf < ./default.conf.template',
        '#fi',
        'docker build -t ${COMPONENT_ID}:${COMPONENT_VERSION} .'
      ])
    },
    {
      id: 'run-docker',
      filter: 'linux',
      desc: '',
      script: (tln, script) => script.set([
        'docker run -d --rm \\',
        ' -p $COMPONENT_PARAM_PORT:$COMPONENT_PARAM_PORT \\',
        ' -p $COMPONENT_PARAM_PORTS:$COMPONENT_PARAM_PORTS \\',
        '  --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}'
      ])
    },
    {
      id: 'install',
      filter: '',
      desc: '',
      script: (tln, script) => {
        const utils = require('../utils');
        const id = script.env["COMPONENT_ID"];
        const version = id.split('-')[1];
        script.set(utils.getDownloadScript(tln, {
            linux:  {name: `node-v${version}-linux-x64.tar.gz`,  opts: [`node-v${version}-linux-x64/*`, `.`, `node-v${version}-linux-x64`], url: `https://nodejs.org/dist/v${version}/node-v${version}-linux-x64.tar.gz`},
            darwin: {name: `node-v${version}-darwin-x64.tar.gz`, opts: [`node-v${version}-darwin-x64/*`, '.', `node-v${version}-darwin-x64`], url: `https://nodejs.org/dist/v${version}/node-v${version}-darwin-x64.tar.gz`},
            win32:  {name: `node-v${version}-win-x64.zip`,       opts: [`node-v${version}-win-x64/*`, `.`, `node-v${version}-win-x64`], url: `https://nodejs.org/dist/v${version}/node-v${version}-win-x64.zip`}
        }));
      }
    }
  ],
  components: (tln) => [
    {id: 'node-10.16.3'},
    {id: 'node-11.15.0'},
    {id: 'node-12.10.0'}
  ]
}
