module.exports = {
  tags: (tln, tags) => {},
  dotenvs: (tln, dotenvs) => [],
  options: (tln, options) => [],
  depends: (tln) => [],
  inherits: (tln) => [],
  variables: (tln, variables) => {},
  steps: (tln, steps) => [
    {
      id: 'init',
      desc: '',
      script: (context) => context.setScript([
        'npm i'
      ])
    },
    {
      id: 'build',
      desc: '',
      script: (context) => context.setScript([
      ])
    },
    {
      id: 'build-prod',
      desc: '',
      script: (context) => context.setScript([
      ])
    },
    {
      id: 'test',
      desc: '',
      script: (context) => context.setScript([
        'npm run jasmine && npm run coverage'
      ])
    },
    {
      id: 'serve',
      desc: '',
      script: (context) => context.setScript([
        'npm run serve'
      ])
    },
    {
      id: 'build-docker',
      desc: '',
      script: (context) => context.setScript([
        '#rm -rf ./target || true',
        '#mkdir target',
        '#mkdir target/conf.d',
        '#if [ -d ./ssl ]',
        '#then',
        '#  envsubst ${COMPONENT_ID} ${COMPONENT_PARAM_HOST} > ./target/conf.d/default.conf < ./default.conf.https.template',
        '#  cp -r ./ssl ./target/',
        '#else',
        '#  envsubst ${COMPONENT_PARAM_HOST} > ./target/conf.d/default.conf < ./default.conf.template',
        '#fi',
        'docker build -t ${COMPONENT_ID}:${COMPONENT_VERSION} .'
      ])
    },
    {
      id: 'run-docker',
      desc: '',
      script: (context) => context.setScript([
        'docker run -d --rm \\',
        ' -p $COMPONENT_PARAM_PORT:$COMPONENT_PARAM_PORT \\',
        ' -p $COMPONENT_PARAM_PORTS:$COMPONENT_PARAM_PORTS \\',
        '  --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}'
      ])
    }
  ],
  components: (tln, components) => []
};