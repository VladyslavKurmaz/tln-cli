const path = require('path');

module.exports = {
  tags: (tln) => [],
  options: (tln, options) => {
    options
      .add('sonar-version', 'SONARQUBE_VERSION',      'Sonarquve version',              'sonarqube:6.7.7-community')
      .add('db-version',    'SONARQUBE_DB_VERSION',   'Database version',               'mysql:5.7')
      .add('db-name',       'SONARQUBE_DB_NAME',      'Database name',                  'sonar')
      .add('db-root-pass',  'SONARQUBE_DB_ROOT_PASS', 'Database root password',         '7Njx73ypX34yQFLS')
      .add('db-user',       'SONARQUBE_DB_USER',      'Database sonar user',            'sonar')
      .add('db-pass',       'SONARQUBE_DB_PASS',      'Database sonar user password',   'JLSWdcfGVVbt5PKU')

      .add('lang',          'SONARQUBE_LANGUAGE',     'Language for sonar.properties',  null)
    ;
  },
  dotenvs: (tln) => [],
  depends: (tln) => [],
  inherits: (tln) => [],
  variables: (tln, variables) => {},
  steps: (tln) => [
    {
      id: 'up',
      filter: 'ubuntu',
      desc: 'Run SonarQube server',
      script: (tln, script) => {
        const src = path.join(__dirname, 'docker-compose.yml.template');
        const dest = path.join(script.env['COMPONENT_HOME'], 'docker-compose.yml');
        script.set([
          /* TODO: support sonar 7.9 without mysql
          `sysctl -w vm.max_map_count=262144`,
          `sysctl -w fs.file-max=65536`,
          `ulimit -n 65536`,
          `ulimit -u 4096`,
          */
          `envsubst < "${src}" > "${dest}"`,
          `docker-compose up -d`
        ])
      }
    },
    {
      id: 'down',
      filter: 'ubuntu',
      desc: 'Down SonarQube server',
      script: (tln, script) => {
        script.set([
          `docker-compose down --rmi all`
        ])
      }
    },
    {
      id: 'generate',
      filter: '',
      script: (tln, script) => {
        const langs = [/*'cpp', 'java',*/ 'js', 'golang',/* 'python', 'php', */'ts'];
        if (script.env['SONARQUBE_LANGUAGE'] && langs.indexOf(script.env['SONARQUBE_LANGUAGE']) != -1) {
          const osInfo = tln.getOsInfo();
          const platform = osInfo.platform;
          const src = path.join(__dirname, 'sonar-project.properties.template');
          const dest = path.join(script.env['COMPONENT_HOME'], 'sonar-project.properties');
          const lang = path.join(__dirname, `${script.env['SONARQUBE_LANGUAGE']}.template`);
          if (platform === 'win32') {
            script.set([
              `copy ${src} ${dest}`,
              `type ${lang} >> ${dest}`
            ]);
          } else {
            script.set([
              `cp ${src} ${dest}`,
              `cat ${lang} >> ${dest}`
            ]);
          }
        } else {
          tln.logger.error('Please define language using --lang option, possible values: ' + langs.join(' | '));
        }
      }
    }
  ],
  components: (tln) => []
}