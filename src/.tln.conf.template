/*
  tln.
    logger.
      trace()
      debug()
      info()
      warn()
      error()
      fatal()
      con()
    utils.
      wrap()
    os
    fs
    path
*/
module.exports = {
  options: async (tln) => {/*
    return {
      prefix: 'TLN_MY_COMPONENT',
      options: [
        ['port', 'Port to listen', '9080', 'string']
      ]
    };
  */},
  env: async (tln, env) => {ENVS/*
    env.TLN_GIT_USER = 'john.doe';
    env.PATH = [tln.path.join(env.TLN_COMPONENT_HOME, 'bin'), env.PATH].join(tln.path.delimiter);
  */},
  dotenvs: async (tln) => [/*'.env'*/],
  inherits: async (tln) => [INHERITS/*'git'*/],
  depends: async (tln) => [DEPENDS/*'openjdk-11.0.2'*/],
  steps: async (tln) => [
    {
      id: 'serve',
      desc: 'Serve service',
/*
      stopPropagation: false,
      upstream: true,
      downstream: false,
      failOnStrErr: true,
*/
      requires: ['TLN_MY_COMPONENT_PORT'],
      builder: async (tln) => {/*
        // 
        return "serve";
        //
        return [
          `echo Listen on port: ${tln.utils.wrap('TLN_MY_COMPONENT_PORT')}`
        ];
        //
        return tln.script
          .command('echo Hi')
          .if()
            eq(tln.utils.wrap('TLN_MY_COMPONENT_PORT'), '9080')
          .then()
            .command()
            .command()
          else()
            .command()
          .command()
        ;
    */}
    }
  ],
  components: async (tln) => [/*
    { id: 'sub-component', tags: async (tln) => [], ... }
  */]
}